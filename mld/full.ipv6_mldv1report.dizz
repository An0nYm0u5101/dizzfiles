
import tools

name = "MLDv1 Report"

objects = [

# Ethernet Header
    field("eth.dst", 16, b"\x33\x33", none),
    field("eth.dst.end", 32, b"\x00\x00\x00\x01", std),
    field("eth.src", 48, b"\x00\x00\x00\x00\x00\x14", none),
    field("eth.type",16, b"\x86\xdd", none),
# End Ethernet Header

# IPv6 Header 
    field("ip6.version", 4, b"\x06", none),
    field("ipv6.traffic_class", 8, b"\x00", none),
    field("ipv6.flow", 20, b"\x00\x00\x00", none),
    field("ipv6.plen", 16, b"\x00\x00", none),
    field("ipv6.nxt", 8, b"\x00", none),
    field("ipv6.hlim", 8, b"\x01", none),
    field("ipv6.src.pre", 16, b"\xfe\x80", none),
    field("ipv6.src.mid", 80, b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", none),
    field("ipv6.src.suf", 32, b"\x00\x00\x00\x14", none),

    field("ipv6.dst.pre", 8, b"\xff", none),
    list("ipv6.dst.scope", b"\x02", "../../data/ipv6_dizzes/validscopes.list"),
    field("ipv6.dst.mid", 80, b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", none),
    link("ipv6.dst.suf", "eth.dst.end"),
# End IPv6 Header

# Hop-by-Hop Header
    field("ipv6.hop_opt.nxt"	, 8	, b"\x3a"	, none),
    field("ipv6.hop_opt.len"	, 8	, b"\x00"	, none),
    field("ipv6.hop_opt.typ"	, 8	, b"\x05"	, none),
    field("ipv6.hop_opt.optlen"	, 8	, b"\x02"	, none),
    field("ipv6.hop_opt.pad1"	, 16	, b"\x00\x00"	, std),
    field("ipv6.hop_opt.pad2"	, 16	, b"\x00\x00"	, std),
# End Hop-by-Hop Header


# MLD Header
    field("icmpv6.type", 8, b"\x83", none),
    field("icmpv6.code", 8, b"\x00", std),
    field("icmpv6.csum", 16, b"\x00\x00", none),
    field("icmpv6.maxresco", 16, b"\x00\x00", std),
    field("icmpv6.res", 16, b"\x00\x00", std),
# End MLD Header

# MLD Report
    link("mld.add.pre", b"ipv6.dst.pre"),
    link("mld.add.scope", b"ipv6.dst.scope"),
    link("mld.add.mid", b"ipv6.dst.mid"),
    link("mld.add.suf", b"ipv6.dst.suf"),
#    field("mld.extra", 16, b"\x00\x00", full),
# End MLD Report

]#End objects

def icmpv6csum(self, input):

	output  = self.obj_dict["ipv6.src.pre"]["cur"]
	output += self.obj_dict["ipv6.src.mid"]["cur"]
	output += self.obj_dict["ipv6.src.suf"]["cur"]
	output += self.obj_dict["ipv6.dst.pre"]["cur"]
	output += self.obj_dict["ipv6.dst.scope"]["cur"]
	output += self.obj_dict["ipv6.dst.mid"]["cur"]
	output += self.obj_dict["ipv6.dst.suf"]["cur"]
	output += tools.pack_with_length(len(input),32)
	output += b'\x00\x00\x00'
	output += self.obj_dict["ipv6.hop_opt.nxt"]["cur"]
	output += input
	
	#print(output)

	return output

functions = [
	length("ipv6.plen", "ipv6.hop_opt.nxt", "mld.add.suf"),
	lambda2_csum("icmpv6.csum", "icmpv6.type", "mld.add.suf", "inet", icmpv6csum, lambda x, y: y)
]
